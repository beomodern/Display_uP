ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DISPLAY_Timer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	DISPLAY_Timer_initVar
  20              		.bss
  21              		.type	DISPLAY_Timer_initVar, %object
  22              		.size	DISPLAY_Timer_initVar, 1
  23              	DISPLAY_Timer_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.DISPLAY_Timer_Init,"ax",%progbits
  26              		.align	2
  27              		.global	DISPLAY_Timer_Init
  28              		.code	16
  29              		.thumb_func
  30              		.type	DISPLAY_Timer_Init, %function
  31              	DISPLAY_Timer_Init:
  32              	.LFB0:
  33              		.file 1 "Generated_Source\\PSoC4\\DISPLAY_Timer.c"
   1:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/DISPLAY_Timer.c **** * File Name: DISPLAY_Timer.c
   3:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Version 2.80
   4:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
   5:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Description:
   6:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  or be used as a capture timer as well.  The capture can be initiated
   9:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  by a positive or negative edge signal as well as via software.
  10:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  A trigger input can be programmed to enable the timer on rising edge
  11:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  falling edge, either edge or continous run.
  12:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Interrupts may be generated due to a terminal count condition
  13:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  or a capture event.
  14:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  15:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Note:
  16:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  17:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
  18:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC4/DISPLAY_Timer.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC4/DISPLAY_Timer.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC4/DISPLAY_Timer.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************/
  23:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  24:Generated_Source\PSoC4/DISPLAY_Timer.c **** #include "DISPLAY_Timer.h"
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 2


  25:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  26:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint8 DISPLAY_Timer_initVar = 0u;
  27:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  28:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  29:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
  30:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_Init
  31:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
  32:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  33:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
  34:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Initialize to the schematic state
  35:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  36:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
  37:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
  38:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  39:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
  40:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
  41:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
  42:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
  43:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_Init(void) 
  44:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
  34              		.loc 1 44 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 8
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 90B5     		push	{r4, r7, lr}
  39              		.cfi_def_cfa_offset 12
  40              		.cfi_offset 4, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 83B0     		sub	sp, sp, #12
  44              		.cfi_def_cfa_offset 24
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  45:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(!DISPLAY_Timer_UsingFixedFunction)
  46:Generated_Source\PSoC4/DISPLAY_Timer.c ****             /* Interrupt State Backup for Critical Region*/
  47:Generated_Source\PSoC4/DISPLAY_Timer.c ****             uint8 DISPLAY_Timer_interruptState;
  48:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Interrupt state back up for Fixed Function only */
  49:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  50:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (DISPLAY_Timer_UsingFixedFunction)
  51:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear all bits but the enable bit (if it's already set) for Timer operation */
  52:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= DISPLAY_Timer_CTRL_ENABLE;
  53:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  54:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear the mode bits for continuous run mode */
  55:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (CY_PSOC5A)
  56:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_CONTROL2 &= ((uint8)(~DISPLAY_Timer_CTRL_MODE_MASK));
  57:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Clear bits in CONTROL2 only in PSOC5A */
  58:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  59:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (CY_PSOC3 || CY_PSOC5LP)
  60:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_CONTROL3 &= ((uint8)(~DISPLAY_Timer_CTRL_MODE_MASK));
  61:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
  62:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  63:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  64:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_RunModeUsed != 0x0u)
  65:Generated_Source\PSoC4/DISPLAY_Timer.c ****             /* Set 3rd bit of Control register to enable one shot mode */
  66:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_CONTROL |= 0x04u;
  67:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
  68:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 3


  69:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_RunModeUsed == 2)
  70:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #if (CY_PSOC5A)
  71:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Set last 2 bits of control2 register if one shot(halt on
  72:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 interrupt) is enabled*/
  73:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL2 |= 0x03u;
  74:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
  75:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  76:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #if (CY_PSOC3 || CY_PSOC5LP)
  77:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Set last 2 bits of control3 register if one shot(halt on
  78:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 interrupt) is enabled*/
  79:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 |= 0x03u;
  80:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
  81:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  82:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
  83:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  84:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_UsingHWEnable != 0)
  85:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #if (CY_PSOC5A)
  86:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Set the default Run Mode of the Timer to Continuous */
  87:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL2 |= DISPLAY_Timer_CTRL_MODE_PULSEWIDTH;
  88:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
  89:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  90:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #if (CY_PSOC3 || CY_PSOC5LP)
  91:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Clear and Set ROD and COD bits of CFG2 register */
  92:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 &= ((uint8)(~DISPLAY_Timer_CTRL_RCOD_MASK));
  93:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 |= DISPLAY_Timer_CTRL_RCOD;
  94:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  95:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Clear and Enable the HW enable bit in CFG2 register */
  96:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 &= ((uint8)(~DISPLAY_Timer_CTRL_ENBL_MASK));
  97:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 |= DISPLAY_Timer_CTRL_ENBL;
  98:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
  99:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 /* Set the default Run Mode of the Timer to Continuous */
 100:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 DISPLAY_Timer_CONTROL3 |= DISPLAY_Timer_CTRL_MODE_CONTINUOUS;
 101:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
 102:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 103:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Configure Run Mode with hardware enable */
 104:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 105:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 106:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_RT1 &= ((uint8)(~DISPLAY_Timer_RT1_MASK));
 107:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_RT1 |= DISPLAY_Timer_SYNC;
 108:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 109:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /*Enable DSI Sync all all inputs of the Timer*/
 110:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_RT1 &= ((uint8)(~DISPLAY_Timer_SYNCDSI_MASK));
 111:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_RT1 |= DISPLAY_Timer_SYNCDSI_EN;
 112:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 113:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Set the IRQ to use the status register interrupts */
 114:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL2 |= DISPLAY_Timer_CTRL2_IRQ_SEL;
 115:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Configuring registers of fixed function implementation */
 116:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 117:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Set Initial values from Configuration */
 118:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_WritePeriod(DISPLAY_Timer_INIT_PERIOD);
  47              		.loc 1 118 0
  48 0006 9023     		movs	r3, #144
  49 0008 FF33     		adds	r3, r3, #255
  50 000a 1800     		movs	r0, r3
  51 000c FFF7FEFF 		bl	DISPLAY_Timer_WritePeriod
 119:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_WriteCounter(DISPLAY_Timer_INIT_PERIOD);
  52              		.loc 1 119 0
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 4


  53 0010 9023     		movs	r3, #144
  54 0012 FF33     		adds	r3, r3, #255
  55 0014 1800     		movs	r0, r3
  56 0016 FFF7FEFF 		bl	DISPLAY_Timer_WriteCounter
 120:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 121:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (DISPLAY_Timer_UsingHWCaptureCounter)/* Capture counter is enabled */
 122:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CAPTURE_COUNT_CTRL |= DISPLAY_Timer_CNTR_ENABLE;
 123:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_SetCaptureCount(DISPLAY_Timer_INIT_CAPTURE_COUNT);
 124:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Configure capture counter value */
 125:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 126:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UsingFixedFunction)
 127:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_SoftwareCaptureMode)
 128:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_SetCaptureMode(DISPLAY_Timer_INIT_CAPTURE_MODE);
 129:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
 130:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 131:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_SoftwareTriggerMode)
 132:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)
 133:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 if (0u == (DISPLAY_Timer_CONTROL & DISPLAY_Timer__B_TIMER__TM_SOFTWARE))
 134:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 {
 135:Generated_Source\PSoC4/DISPLAY_Timer.c ****                     DISPLAY_Timer_SetTriggerMode(DISPLAY_Timer_INIT_TRIGGER_MODE);
 136:Generated_Source\PSoC4/DISPLAY_Timer.c ****                 }
 137:Generated_Source\PSoC4/DISPLAY_Timer.c ****             #endif /* (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) */
 138:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
 139:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 140:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critica
 141:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Enter Critical Region*/
 142:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_interruptState = CyEnterCriticalSection();
  57              		.loc 1 142 0
  58 001a FC1D     		adds	r4, r7, #7
  59 001c FFF7FEFF 		bl	CyEnterCriticalSection
  60 0020 0300     		movs	r3, r0
  61 0022 2370     		strb	r3, [r4]
 143:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 144:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Use the interrupt output of the status register for IRQ output */
 145:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_STATUS_AUX_CTRL |= DISPLAY_Timer_STATUS_ACTL_INT_EN_MASK;
  62              		.loc 1 145 0
  63 0024 0A4A     		ldr	r2, .L2
  64 0026 0A4B     		ldr	r3, .L2
  65 0028 1B78     		ldrb	r3, [r3]
  66 002a DBB2     		uxtb	r3, r3
  67 002c 1021     		movs	r1, #16
  68 002e 0B43     		orrs	r3, r1
  69 0030 DBB2     		uxtb	r3, r3
  70 0032 1370     		strb	r3, [r2]
 146:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 147:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Exit Critical Region*/
 148:Generated_Source\PSoC4/DISPLAY_Timer.c ****         CyExitCriticalSection(DISPLAY_Timer_interruptState);
  71              		.loc 1 148 0
  72 0034 FB1D     		adds	r3, r7, #7
  73 0036 1B78     		ldrb	r3, [r3]
  74 0038 1800     		movs	r0, r3
  75 003a FFF7FEFF 		bl	CyExitCriticalSection
 149:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 150:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_EnableTriggerMode)
 151:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_EnableTrigger();
 152:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Set Trigger enable bit for UDB implementation in the control register*/
 153:Generated_Source\PSoC4/DISPLAY_Timer.c **** 		
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 5


 154:Generated_Source\PSoC4/DISPLAY_Timer.c **** 		
 155:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #if (DISPLAY_Timer_InterruptOnCaptureCount && !DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)
 156:Generated_Source\PSoC4/DISPLAY_Timer.c ****             DISPLAY_Timer_SetInterruptCount(DISPLAY_Timer_INIT_INT_CAPTURE_COUNT);
 157:Generated_Source\PSoC4/DISPLAY_Timer.c ****         #endif /* Set interrupt count in UDB implementation if interrupt count feature is checked.*
 158:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 159:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_ClearFIFO();
  76              		.loc 1 159 0
  77 003e FFF7FEFF 		bl	DISPLAY_Timer_ClearFIFO
 160:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Configure additional features of UDB implementation */
 161:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 162:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_SetInterruptMode(DISPLAY_Timer_INIT_INTERRUPT_MODE);
  78              		.loc 1 162 0
  79 0042 0120     		movs	r0, #1
  80 0044 FFF7FEFF 		bl	DISPLAY_Timer_SetInterruptMode
 163:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
  81              		.loc 1 163 0
  82 0048 C046     		nop
  83 004a BD46     		mov	sp, r7
  84 004c 03B0     		add	sp, sp, #12
  85              		@ sp needed
  86 004e 90BD     		pop	{r4, r7, pc}
  87              	.L3:
  88              		.align	2
  89              	.L2:
  90 0050 93000F40 		.word	1074725011
  91              		.cfi_endproc
  92              	.LFE0:
  93              		.size	DISPLAY_Timer_Init, .-DISPLAY_Timer_Init
  94              		.section	.text.DISPLAY_Timer_Enable,"ax",%progbits
  95              		.align	2
  96              		.global	DISPLAY_Timer_Enable
  97              		.code	16
  98              		.thumb_func
  99              		.type	DISPLAY_Timer_Enable, %function
 100              	DISPLAY_Timer_Enable:
 101              	.LFB1:
 164:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 165:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 166:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 167:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_Enable
 168:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 169:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 170:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 171:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Enable the Timer
 172:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 173:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 174:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 175:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 176:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 177:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 178:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 179:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 180:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_Enable(void) 
 181:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 102              		.loc 1 181 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 6


 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 80B5     		push	{r7, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 00AF     		add	r7, sp, #0
 111              		.cfi_def_cfa_register 7
 182:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Globally Enable the Fixed Function Block chosen */
 183:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (DISPLAY_Timer_UsingFixedFunction)
 184:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_GLOBAL_ENABLE |= DISPLAY_Timer_BLOCK_EN_MASK;
 185:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_GLOBAL_STBY_ENABLE |= DISPLAY_Timer_BLOCK_STBY_EN_MASK;
 186:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Set Enable bit for enabling Fixed function timer*/
 187:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 188:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Remove assignment if control register is removed */
 189:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED || DISPLAY_Timer_UsingFixedFunction)
 190:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL |= DISPLAY_Timer_CTRL_ENABLE;
 112              		.loc 1 190 0
 113 0004 0549     		ldr	r1, .L5
 114 0006 054B     		ldr	r3, .L5
 115 0008 1B78     		ldrb	r3, [r3]
 116 000a DBB2     		uxtb	r3, r3
 117 000c 8022     		movs	r2, #128
 118 000e 5242     		rsbs	r2, r2, #0
 119 0010 1343     		orrs	r3, r2
 120 0012 DBB2     		uxtb	r3, r3
 121 0014 0B70     		strb	r3, [r1]
 191:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Remove assignment if control register is removed */
 192:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 122              		.loc 1 192 0
 123 0016 C046     		nop
 124 0018 BD46     		mov	sp, r7
 125              		@ sp needed
 126 001a 80BD     		pop	{r7, pc}
 127              	.L6:
 128              		.align	2
 129              	.L5:
 130 001c 73000F40 		.word	1074724979
 131              		.cfi_endproc
 132              	.LFE1:
 133              		.size	DISPLAY_Timer_Enable, .-DISPLAY_Timer_Enable
 134              		.section	.text.DISPLAY_Timer_Start,"ax",%progbits
 135              		.align	2
 136              		.global	DISPLAY_Timer_Start
 137              		.code	16
 138              		.thumb_func
 139              		.type	DISPLAY_Timer_Start, %function
 140              	DISPLAY_Timer_Start:
 141              	.LFB2:
 193:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 194:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 195:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 196:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_Start
 197:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 198:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 199:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 200:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The start function initializes the timer with the default values, the
 201:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  enables the timerto begin counting.  It does not enable interrupts,
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 7


 202:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  the EnableInt command should be called if interrupt generation is required.
 203:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 204:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 205:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 206:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 207:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 208:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 209:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 210:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Global variables:
 211:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  DISPLAY_Timer_initVar: Is modified when this function is called for the
 212:Generated_Source\PSoC4/DISPLAY_Timer.c **** *   first time. Is used to ensure that initialization happens only once.
 213:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 214:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 215:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_Start(void) 
 216:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 142              		.loc 1 216 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 00AF     		add	r7, sp, #0
 151              		.cfi_def_cfa_register 7
 217:Generated_Source\PSoC4/DISPLAY_Timer.c ****     if(DISPLAY_Timer_initVar == 0u)
 152              		.loc 1 217 0
 153 0004 064B     		ldr	r3, .L9
 154 0006 1B78     		ldrb	r3, [r3]
 155 0008 002B     		cmp	r3, #0
 156 000a 04D1     		bne	.L8
 218:Generated_Source\PSoC4/DISPLAY_Timer.c ****     {
 219:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_Init();
 157              		.loc 1 219 0
 158 000c FFF7FEFF 		bl	DISPLAY_Timer_Init
 220:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 221:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_initVar = 1u;   /* Clear this bit for Initialization */
 159              		.loc 1 221 0
 160 0010 034B     		ldr	r3, .L9
 161 0012 0122     		movs	r2, #1
 162 0014 1A70     		strb	r2, [r3]
 163              	.L8:
 222:Generated_Source\PSoC4/DISPLAY_Timer.c ****     }
 223:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 224:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Enable the Timer */
 225:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_Enable();
 164              		.loc 1 225 0
 165 0016 FFF7FEFF 		bl	DISPLAY_Timer_Enable
 226:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 166              		.loc 1 226 0
 167 001a C046     		nop
 168 001c BD46     		mov	sp, r7
 169              		@ sp needed
 170 001e 80BD     		pop	{r7, pc}
 171              	.L10:
 172              		.align	2
 173              	.L9:
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 8


 174 0020 00000000 		.word	DISPLAY_Timer_initVar
 175              		.cfi_endproc
 176              	.LFE2:
 177              		.size	DISPLAY_Timer_Start, .-DISPLAY_Timer_Start
 178              		.section	.text.DISPLAY_Timer_Stop,"ax",%progbits
 179              		.align	2
 180              		.global	DISPLAY_Timer_Stop
 181              		.code	16
 182              		.thumb_func
 183              		.type	DISPLAY_Timer_Stop, %function
 184              	DISPLAY_Timer_Stop:
 185              	.LFB3:
 227:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 228:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 229:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 230:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_Stop
 231:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 232:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 233:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 234:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The stop function halts the timer, but does not change any modes or disable
 235:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  interrupts.
 236:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 237:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 238:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 239:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 240:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 241:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 242:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 243:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Side Effects: If the Enable mode is set to Hardware only then this function
 244:Generated_Source\PSoC4/DISPLAY_Timer.c **** *               has no effect on the operation of the timer.
 245:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 246:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 247:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_Stop(void) 
 248:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 186              		.loc 1 248 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
 249:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Disable Timer */
 250:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED || DISPLAY_Timer_UsingFixedFunction)
 251:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= ((uint8)(~DISPLAY_Timer_CTRL_ENABLE));
 196              		.loc 1 251 0
 197 0004 054A     		ldr	r2, .L12
 198 0006 054B     		ldr	r3, .L12
 199 0008 1B78     		ldrb	r3, [r3]
 200 000a DBB2     		uxtb	r3, r3
 201 000c 7F21     		movs	r1, #127
 202 000e 0B40     		ands	r3, r1
 203 0010 DBB2     		uxtb	r3, r3
 204 0012 1370     		strb	r3, [r2]
 252:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Remove assignment if control register is removed */
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 9


 253:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 254:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Globally disable the Fixed Function Block chosen */
 255:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (DISPLAY_Timer_UsingFixedFunction)
 256:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_GLOBAL_ENABLE &= ((uint8)(~DISPLAY_Timer_BLOCK_EN_MASK));
 257:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_GLOBAL_STBY_ENABLE &= ((uint8)(~DISPLAY_Timer_BLOCK_STBY_EN_MASK));
 258:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 259:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 205              		.loc 1 259 0
 206 0014 C046     		nop
 207 0016 BD46     		mov	sp, r7
 208              		@ sp needed
 209 0018 80BD     		pop	{r7, pc}
 210              	.L13:
 211 001a C046     		.align	2
 212              	.L12:
 213 001c 73000F40 		.word	1074724979
 214              		.cfi_endproc
 215              	.LFE3:
 216              		.size	DISPLAY_Timer_Stop, .-DISPLAY_Timer_Stop
 217              		.section	.text.DISPLAY_Timer_SetInterruptMode,"ax",%progbits
 218              		.align	2
 219              		.global	DISPLAY_Timer_SetInterruptMode
 220              		.code	16
 221              		.thumb_func
 222              		.type	DISPLAY_Timer_SetInterruptMode, %function
 223              	DISPLAY_Timer_SetInterruptMode:
 224              	.LFB4:
 260:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 261:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 262:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 263:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SetInterruptMode
 264:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 265:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 266:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 267:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function selects which of the interrupt inputs may cause an interrupt.
 268:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The twosources are caputure and terminal.  One, both or neither may
 269:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  be selected.
 270:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 271:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 272:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  interruptMode:   This parameter is used to enable interrups on either/or
 273:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                   terminal count or capture.
 274:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 275:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 276:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 277:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 278:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 279:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SetInterruptMode(uint8 interruptMode) 
 280:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 225              		.loc 1 280 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229 0000 80B5     		push	{r7, lr}
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 10


 234              		.cfi_def_cfa_offset 16
 235 0004 00AF     		add	r7, sp, #0
 236              		.cfi_def_cfa_register 7
 237 0006 0200     		movs	r2, r0
 238 0008 FB1D     		adds	r3, r7, #7
 239 000a 1A70     		strb	r2, [r3]
 281:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_STATUS_MASK = interruptMode;
 240              		.loc 1 281 0
 241 000c 034A     		ldr	r2, .L15
 242 000e FB1D     		adds	r3, r7, #7
 243 0010 1B78     		ldrb	r3, [r3]
 244 0012 1370     		strb	r3, [r2]
 282:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 245              		.loc 1 282 0
 246 0014 C046     		nop
 247 0016 BD46     		mov	sp, r7
 248 0018 02B0     		add	sp, sp, #8
 249              		@ sp needed
 250 001a 80BD     		pop	{r7, pc}
 251              	.L16:
 252              		.align	2
 253              	.L15:
 254 001c 83000F40 		.word	1074724995
 255              		.cfi_endproc
 256              	.LFE4:
 257              		.size	DISPLAY_Timer_SetInterruptMode, .-DISPLAY_Timer_SetInterruptMode
 258              		.section	.text.DISPLAY_Timer_SoftwareCapture,"ax",%progbits
 259              		.align	2
 260              		.global	DISPLAY_Timer_SoftwareCapture
 261              		.code	16
 262              		.thumb_func
 263              		.type	DISPLAY_Timer_SoftwareCapture, %function
 264              	DISPLAY_Timer_SoftwareCapture:
 265              	.LFB5:
 283:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 284:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 285:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 286:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SoftwareCapture
 287:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 288:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 289:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 290:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function forces a capture independent of the capture signal.
 291:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 292:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 293:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 294:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 295:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 296:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 297:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 298:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Side Effects:
 299:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  An existing hardware capture could be overwritten.
 300:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 301:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 302:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SoftwareCapture(void) 
 303:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 266              		.loc 1 303 0
 267              		.cfi_startproc
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 11


 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 00AF     		add	r7, sp, #0
 275              		.cfi_def_cfa_register 7
 304:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Generate a software capture by reading the counter register */
 305:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(DISPLAY_Timer_UsingFixedFunction)
 306:Generated_Source\PSoC4/DISPLAY_Timer.c ****         (void)CY_GET_REG16(DISPLAY_Timer_COUNTER_LSB_PTR);
 307:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 308:Generated_Source\PSoC4/DISPLAY_Timer.c ****         (void)CY_GET_REG8(DISPLAY_Timer_COUNTER_LSB_PTR_8BIT);
 276              		.loc 1 308 0
 277 0004 024B     		ldr	r3, .L18
 278 0006 1B78     		ldrb	r3, [r3]
 309:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif/* (DISPLAY_Timer_UsingFixedFunction) */
 310:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Capture Data is now in the FIFO */
 311:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 279              		.loc 1 311 0
 280 0008 C046     		nop
 281 000a BD46     		mov	sp, r7
 282              		@ sp needed
 283 000c 80BD     		pop	{r7, pc}
 284              	.L19:
 285 000e C046     		.align	2
 286              	.L18:
 287 0010 02000F40 		.word	1074724866
 288              		.cfi_endproc
 289              	.LFE5:
 290              		.size	DISPLAY_Timer_SoftwareCapture, .-DISPLAY_Timer_SoftwareCapture
 291              		.section	.text.DISPLAY_Timer_ReadStatusRegister,"ax",%progbits
 292              		.align	2
 293              		.global	DISPLAY_Timer_ReadStatusRegister
 294              		.code	16
 295              		.thumb_func
 296              		.type	DISPLAY_Timer_ReadStatusRegister, %function
 297              	DISPLAY_Timer_ReadStatusRegister:
 298              	.LFB6:
 312:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 313:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 314:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 315:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadStatusRegister
 316:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 317:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 318:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 319:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Reads the status register and returns it's state. This function should use
 320:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  defined types for the bit-field information as the bits in this register may
 321:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  be permuteable.
 322:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 323:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 324:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 325:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 326:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 327:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The contents of the status register
 328:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 329:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Side Effects:
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 12


 330:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Status register bits may be clear on read.
 331:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 332:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 333:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint8   DISPLAY_Timer_ReadStatusRegister(void) 
 334:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 299              		.loc 1 334 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 00AF     		add	r7, sp, #0
 308              		.cfi_def_cfa_register 7
 335:Generated_Source\PSoC4/DISPLAY_Timer.c ****     return (DISPLAY_Timer_STATUS);
 309              		.loc 1 335 0
 310 0004 024B     		ldr	r3, .L22
 311 0006 1B78     		ldrb	r3, [r3]
 312 0008 DBB2     		uxtb	r3, r3
 336:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 313              		.loc 1 336 0
 314 000a 1800     		movs	r0, r3
 315 000c BD46     		mov	sp, r7
 316              		@ sp needed
 317 000e 80BD     		pop	{r7, pc}
 318              	.L23:
 319              		.align	2
 320              	.L22:
 321 0010 63000F40 		.word	1074724963
 322              		.cfi_endproc
 323              	.LFE6:
 324              		.size	DISPLAY_Timer_ReadStatusRegister, .-DISPLAY_Timer_ReadStatusRegister
 325              		.section	.text.DISPLAY_Timer_ReadControlRegister,"ax",%progbits
 326              		.align	2
 327              		.global	DISPLAY_Timer_ReadControlRegister
 328              		.code	16
 329              		.thumb_func
 330              		.type	DISPLAY_Timer_ReadControlRegister, %function
 331              	DISPLAY_Timer_ReadControlRegister:
 332              	.LFB7:
 337:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 338:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 339:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) /* Remove API if control register is unused */
 340:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 341:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 342:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 343:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadControlRegister
 344:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 345:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 346:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 347:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Reads the control register and returns it's value.
 348:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 349:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 350:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 351:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 352:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 13


 353:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The contents of the control register
 354:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 355:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 356:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint8 DISPLAY_Timer_ReadControlRegister(void) 
 357:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 333              		.loc 1 357 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 7, -8
 340              		.cfi_offset 14, -4
 341 0002 00AF     		add	r7, sp, #0
 342              		.cfi_def_cfa_register 7
 358:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) 
 359:Generated_Source\PSoC4/DISPLAY_Timer.c ****         return ((uint8)DISPLAY_Timer_CONTROL);
 343              		.loc 1 359 0
 344 0004 024B     		ldr	r3, .L26
 345 0006 1B78     		ldrb	r3, [r3]
 346 0008 DBB2     		uxtb	r3, r3
 360:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 361:Generated_Source\PSoC4/DISPLAY_Timer.c ****         return (0);
 362:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) */
 363:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 347              		.loc 1 363 0
 348 000a 1800     		movs	r0, r3
 349 000c BD46     		mov	sp, r7
 350              		@ sp needed
 351 000e 80BD     		pop	{r7, pc}
 352              	.L27:
 353              		.align	2
 354              	.L26:
 355 0010 73000F40 		.word	1074724979
 356              		.cfi_endproc
 357              	.LFE7:
 358              		.size	DISPLAY_Timer_ReadControlRegister, .-DISPLAY_Timer_ReadControlRegister
 359              		.section	.text.DISPLAY_Timer_WriteControlRegister,"ax",%progbits
 360              		.align	2
 361              		.global	DISPLAY_Timer_WriteControlRegister
 362              		.code	16
 363              		.thumb_func
 364              		.type	DISPLAY_Timer_WriteControlRegister, %function
 365              	DISPLAY_Timer_WriteControlRegister:
 366              	.LFB8:
 364:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 365:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 366:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 367:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_WriteControlRegister
 368:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 369:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 370:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 371:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Sets the bit-field of the control register.
 372:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 373:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 374:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  control: The contents of the control register
 375:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 14


 376:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 377:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 378:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 379:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_WriteControlRegister(uint8 control) 
 380:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 367              		.loc 1 380 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 8
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371 0000 80B5     		push	{r7, lr}
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 7, -8
 374              		.cfi_offset 14, -4
 375 0002 82B0     		sub	sp, sp, #8
 376              		.cfi_def_cfa_offset 16
 377 0004 00AF     		add	r7, sp, #0
 378              		.cfi_def_cfa_register 7
 379 0006 0200     		movs	r2, r0
 380 0008 FB1D     		adds	r3, r7, #7
 381 000a 1A70     		strb	r2, [r3]
 381:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) 
 382:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL = control;
 382              		.loc 1 382 0
 383 000c 034A     		ldr	r2, .L29
 384 000e FB1D     		adds	r3, r7, #7
 385 0010 1B78     		ldrb	r3, [r3]
 386 0012 1370     		strb	r3, [r2]
 383:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 384:Generated_Source\PSoC4/DISPLAY_Timer.c ****         control = 0u;
 385:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) */
 386:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 387              		.loc 1 386 0
 388 0014 C046     		nop
 389 0016 BD46     		mov	sp, r7
 390 0018 02B0     		add	sp, sp, #8
 391              		@ sp needed
 392 001a 80BD     		pop	{r7, pc}
 393              	.L30:
 394              		.align	2
 395              	.L29:
 396 001c 73000F40 		.word	1074724979
 397              		.cfi_endproc
 398              	.LFE8:
 399              		.size	DISPLAY_Timer_WriteControlRegister, .-DISPLAY_Timer_WriteControlRegister
 400              		.section	.text.DISPLAY_Timer_ReadPeriod,"ax",%progbits
 401              		.align	2
 402              		.global	DISPLAY_Timer_ReadPeriod
 403              		.code	16
 404              		.thumb_func
 405              		.type	DISPLAY_Timer_ReadPeriod, %function
 406              	DISPLAY_Timer_ReadPeriod:
 407              	.LFB9:
 387:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 388:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* Remove API if control register is unused */
 389:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 390:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 391:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 15


 392:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadPeriod
 393:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 394:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 395:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 396:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function returns the current value of the Period.
 397:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 398:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 399:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 400:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 401:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 402:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The present value of the counter.
 403:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 404:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 405:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint16 DISPLAY_Timer_ReadPeriod(void) 
 406:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 408              		.loc 1 406 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412 0000 80B5     		push	{r7, lr}
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 407:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #if(DISPLAY_Timer_UsingFixedFunction)
 408:Generated_Source\PSoC4/DISPLAY_Timer.c ****        return ((uint16)CY_GET_REG16(DISPLAY_Timer_PERIOD_LSB_PTR));
 409:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #else
 410:Generated_Source\PSoC4/DISPLAY_Timer.c ****        return (CY_GET_REG16(DISPLAY_Timer_PERIOD_LSB_PTR));
 418              		.loc 1 410 0
 419 0004 024B     		ldr	r3, .L33
 420 0006 1B88     		ldrh	r3, [r3]
 421 0008 9BB2     		uxth	r3, r3
 411:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #endif /* (DISPLAY_Timer_UsingFixedFunction) */
 412:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 422              		.loc 1 412 0
 423 000a 1800     		movs	r0, r3
 424 000c BD46     		mov	sp, r7
 425              		@ sp needed
 426 000e 80BD     		pop	{r7, pc}
 427              	.L34:
 428              		.align	2
 429              	.L33:
 430 0010 44100F40 		.word	1074729028
 431              		.cfi_endproc
 432              	.LFE9:
 433              		.size	DISPLAY_Timer_ReadPeriod, .-DISPLAY_Timer_ReadPeriod
 434              		.section	.text.DISPLAY_Timer_WritePeriod,"ax",%progbits
 435              		.align	2
 436              		.global	DISPLAY_Timer_WritePeriod
 437              		.code	16
 438              		.thumb_func
 439              		.type	DISPLAY_Timer_WritePeriod, %function
 440              	DISPLAY_Timer_WritePeriod:
 441              	.LFB10:
 413:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 414:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 16


 415:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 416:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_WritePeriod
 417:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 418:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 419:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 420:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function is used to change the period of the counter.  The new period
 421:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  will be loaded the next time terminal count is detected.
 422:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 423:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 424:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 425:Generated_Source\PSoC4/DISPLAY_Timer.c **** *          result in the counter remaining at zero.
 426:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 427:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 428:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 429:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 430:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 431:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_WritePeriod(uint16 period) 
 432:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 442              		.loc 1 432 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 82B0     		sub	sp, sp, #8
 451              		.cfi_def_cfa_offset 16
 452 0004 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 454 0006 0200     		movs	r2, r0
 455 0008 BB1D     		adds	r3, r7, #6
 456 000a 1A80     		strh	r2, [r3]
 433:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(DISPLAY_Timer_UsingFixedFunction)
 434:Generated_Source\PSoC4/DISPLAY_Timer.c ****         uint16 period_temp = (uint16)period;
 435:Generated_Source\PSoC4/DISPLAY_Timer.c ****         CY_SET_REG16(DISPLAY_Timer_PERIOD_LSB_PTR, period_temp);
 436:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 437:Generated_Source\PSoC4/DISPLAY_Timer.c ****         CY_SET_REG16(DISPLAY_Timer_PERIOD_LSB_PTR, period);
 457              		.loc 1 437 0
 458 000c 034A     		ldr	r2, .L36
 459 000e BB1D     		adds	r3, r7, #6
 460 0010 1B88     		ldrh	r3, [r3]
 461 0012 1380     		strh	r3, [r2]
 438:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed functi
 439:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 462              		.loc 1 439 0
 463 0014 C046     		nop
 464 0016 BD46     		mov	sp, r7
 465 0018 02B0     		add	sp, sp, #8
 466              		@ sp needed
 467 001a 80BD     		pop	{r7, pc}
 468              	.L37:
 469              		.align	2
 470              	.L36:
 471 001c 44100F40 		.word	1074729028
 472              		.cfi_endproc
 473              	.LFE10:
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 17


 474              		.size	DISPLAY_Timer_WritePeriod, .-DISPLAY_Timer_WritePeriod
 475              		.section	.text.DISPLAY_Timer_ReadCapture,"ax",%progbits
 476              		.align	2
 477              		.global	DISPLAY_Timer_ReadCapture
 478              		.code	16
 479              		.thumb_func
 480              		.type	DISPLAY_Timer_ReadCapture, %function
 481              	DISPLAY_Timer_ReadCapture:
 482              	.LFB11:
 440:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 441:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 442:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 443:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadCapture
 444:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 445:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 446:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 447:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function returns the last value captured.
 448:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 449:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 450:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 451:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 452:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 453:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Present Capture value.
 454:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 455:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 456:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint16 DISPLAY_Timer_ReadCapture(void) 
 457:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 483              		.loc 1 457 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487 0000 80B5     		push	{r7, lr}
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 00AF     		add	r7, sp, #0
 492              		.cfi_def_cfa_register 7
 458:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #if(DISPLAY_Timer_UsingFixedFunction)
 459:Generated_Source\PSoC4/DISPLAY_Timer.c ****        return ((uint16)CY_GET_REG16(DISPLAY_Timer_CAPTURE_LSB_PTR));
 460:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #else
 461:Generated_Source\PSoC4/DISPLAY_Timer.c ****        return (CY_GET_REG16(DISPLAY_Timer_CAPTURE_LSB_PTR));
 493              		.loc 1 461 0
 494 0004 024B     		ldr	r3, .L40
 495 0006 1B88     		ldrh	r3, [r3]
 496 0008 9BB2     		uxth	r3, r3
 462:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #endif /* (DISPLAY_Timer_UsingFixedFunction) */
 463:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 497              		.loc 1 463 0
 498 000a 1800     		movs	r0, r3
 499 000c BD46     		mov	sp, r7
 500              		@ sp needed
 501 000e 80BD     		pop	{r7, pc}
 502              	.L41:
 503              		.align	2
 504              	.L40:
 505 0010 84100F40 		.word	1074729092
 506              		.cfi_endproc
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 18


 507              	.LFE11:
 508              		.size	DISPLAY_Timer_ReadCapture, .-DISPLAY_Timer_ReadCapture
 509              		.section	.text.DISPLAY_Timer_WriteCounter,"ax",%progbits
 510              		.align	2
 511              		.global	DISPLAY_Timer_WriteCounter
 512              		.code	16
 513              		.thumb_func
 514              		.type	DISPLAY_Timer_WriteCounter, %function
 515              	DISPLAY_Timer_WriteCounter:
 516              	.LFB12:
 464:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 465:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 466:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 467:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_WriteCounter
 468:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 469:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 470:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 471:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This funtion is used to set the counter to a specific value
 472:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 473:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 474:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  counter:  New counter value.
 475:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 476:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 477:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 478:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 479:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 480:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_WriteCounter(uint16 counter) 
 481:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 517              		.loc 1 481 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 8
 520              		@ frame_needed = 1, uses_anonymous_args = 0
 521 0000 80B5     		push	{r7, lr}
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 82B0     		sub	sp, sp, #8
 526              		.cfi_def_cfa_offset 16
 527 0004 00AF     		add	r7, sp, #0
 528              		.cfi_def_cfa_register 7
 529 0006 0200     		movs	r2, r0
 530 0008 BB1D     		adds	r3, r7, #6
 531 000a 1A80     		strh	r2, [r3]
 482:Generated_Source\PSoC4/DISPLAY_Timer.c ****    #if(DISPLAY_Timer_UsingFixedFunction)
 483:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* This functionality is removed until a FixedFunction HW update to
 484:Generated_Source\PSoC4/DISPLAY_Timer.c ****          * allow this register to be written
 485:Generated_Source\PSoC4/DISPLAY_Timer.c ****          */
 486:Generated_Source\PSoC4/DISPLAY_Timer.c ****         CY_SET_REG16(DISPLAY_Timer_COUNTER_LSB_PTR, (uint16)counter);
 487:Generated_Source\PSoC4/DISPLAY_Timer.c ****         
 488:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 489:Generated_Source\PSoC4/DISPLAY_Timer.c ****         CY_SET_REG16(DISPLAY_Timer_COUNTER_LSB_PTR, counter);
 532              		.loc 1 489 0
 533 000c 034A     		ldr	r2, .L43
 534 000e BB1D     		adds	r3, r7, #6
 535 0010 1B88     		ldrh	r3, [r3]
 536 0012 1380     		strh	r3, [r2]
 490:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fix
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 19


 491:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 537              		.loc 1 491 0
 538 0014 C046     		nop
 539 0016 BD46     		mov	sp, r7
 540 0018 02B0     		add	sp, sp, #8
 541              		@ sp needed
 542 001a 80BD     		pop	{r7, pc}
 543              	.L44:
 544              		.align	2
 545              	.L43:
 546 001c 04100F40 		.word	1074728964
 547              		.cfi_endproc
 548              	.LFE12:
 549              		.size	DISPLAY_Timer_WriteCounter, .-DISPLAY_Timer_WriteCounter
 550              		.section	.text.DISPLAY_Timer_ReadCounter,"ax",%progbits
 551              		.align	2
 552              		.global	DISPLAY_Timer_ReadCounter
 553              		.code	16
 554              		.thumb_func
 555              		.type	DISPLAY_Timer_ReadCounter, %function
 556              	DISPLAY_Timer_ReadCounter:
 557              	.LFB13:
 492:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 493:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 494:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 495:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadCounter
 496:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 497:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 498:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 499:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function returns the current counter value.
 500:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 501:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 502:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 503:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 504:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 505:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Present compare value.
 506:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 507:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 508:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint16 DISPLAY_Timer_ReadCounter(void) 
 509:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 558              		.loc 1 509 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 510:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Force capture by reading Accumulator */
 511:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Must first do a software capture to be able to read the counter */
 512:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 513:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(DISPLAY_Timer_UsingFixedFunction)
 514:Generated_Source\PSoC4/DISPLAY_Timer.c ****         (void)CY_GET_REG16(DISPLAY_Timer_COUNTER_LSB_PTR);
 515:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 516:Generated_Source\PSoC4/DISPLAY_Timer.c ****         (void)CY_GET_REG8(DISPLAY_Timer_COUNTER_LSB_PTR_8BIT);
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 20


 568              		.loc 1 516 0
 569 0004 034B     		ldr	r3, .L47
 570 0006 1B78     		ldrb	r3, [r3]
 517:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif/* (DISPLAY_Timer_UsingFixedFunction) */
 518:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 519:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* Read the data from the FIFO (or capture register for Fixed Function)*/
 520:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if(DISPLAY_Timer_UsingFixedFunction)
 521:Generated_Source\PSoC4/DISPLAY_Timer.c ****         return ((uint16)CY_GET_REG16(DISPLAY_Timer_CAPTURE_LSB_PTR));
 522:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #else
 523:Generated_Source\PSoC4/DISPLAY_Timer.c ****         return (CY_GET_REG16(DISPLAY_Timer_CAPTURE_LSB_PTR));
 571              		.loc 1 523 0
 572 0008 034B     		ldr	r3, .L47+4
 573 000a 1B88     		ldrh	r3, [r3]
 574 000c 9BB2     		uxth	r3, r3
 524:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* (DISPLAY_Timer_UsingFixedFunction) */
 525:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 575              		.loc 1 525 0
 576 000e 1800     		movs	r0, r3
 577 0010 BD46     		mov	sp, r7
 578              		@ sp needed
 579 0012 80BD     		pop	{r7, pc}
 580              	.L48:
 581              		.align	2
 582              	.L47:
 583 0014 02000F40 		.word	1074724866
 584 0018 84100F40 		.word	1074729092
 585              		.cfi_endproc
 586              	.LFE13:
 587              		.size	DISPLAY_Timer_ReadCounter, .-DISPLAY_Timer_ReadCounter
 588              		.section	.text.DISPLAY_Timer_ClearFIFO,"ax",%progbits
 589              		.align	2
 590              		.global	DISPLAY_Timer_ClearFIFO
 591              		.code	16
 592              		.thumb_func
 593              		.type	DISPLAY_Timer_ClearFIFO, %function
 594              	DISPLAY_Timer_ClearFIFO:
 595              	.LFB14:
 526:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 527:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 528:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if(!DISPLAY_Timer_UsingFixedFunction) /* UDB Specific Functions */
 529:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 530:Generated_Source\PSoC4/DISPLAY_Timer.c ****     
 531:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 532:Generated_Source\PSoC4/DISPLAY_Timer.c ****  * The functions below this point are only available using the UDB
 533:Generated_Source\PSoC4/DISPLAY_Timer.c ****  * implementation.  If a feature is selected, then the API is enabled.
 534:Generated_Source\PSoC4/DISPLAY_Timer.c ****  ******************************************************************************/
 535:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 536:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 537:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if (DISPLAY_Timer_SoftwareCaptureMode)
 538:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 539:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 540:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 541:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SetCaptureMode
 542:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 543:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 544:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 545:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function sets the capture mode to either rising or falling edge.
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 21


 546:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 547:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 548:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  captureMode: This parameter sets the capture mode of the UDB capture feature
 549:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The parameter values are defined using the
 550:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  #define DISPLAY_Timer__B_TIMER__CM_NONE 0
 551:Generated_Source\PSoC4/DISPLAY_Timer.c **** #define DISPLAY_Timer__B_TIMER__CM_RISINGEDGE 1
 552:Generated_Source\PSoC4/DISPLAY_Timer.c **** #define DISPLAY_Timer__B_TIMER__CM_FALLINGEDGE 2
 553:Generated_Source\PSoC4/DISPLAY_Timer.c **** #define DISPLAY_Timer__B_TIMER__CM_EITHEREDGE 3
 554:Generated_Source\PSoC4/DISPLAY_Timer.c **** #define DISPLAY_Timer__B_TIMER__CM_SOFTWARE 4
 555:Generated_Source\PSoC4/DISPLAY_Timer.c ****  identifiers
 556:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  The following are the possible values of the parameter
 557:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  DISPLAY_Timer__B_TIMER__CM_NONE        - Set Capture mode to None
 558:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  DISPLAY_Timer__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
 559:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  DISPLAY_Timer__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
 560:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  DISPLAY_Timer__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
 561:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 562:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 563:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 564:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 565:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 566:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SetCaptureMode(uint8 captureMode) 
 567:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 568:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* This must only set to two bits of the control register associated */
 569:Generated_Source\PSoC4/DISPLAY_Timer.c ****     captureMode = ((uint8)((uint8)captureMode << DISPLAY_Timer_CTRL_CAP_MODE_SHIFT));
 570:Generated_Source\PSoC4/DISPLAY_Timer.c ****     captureMode &= (DISPLAY_Timer_CTRL_CAP_MODE_MASK);
 571:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 572:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)
 573:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear the Current Setting */
 574:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= ((uint8)(~DISPLAY_Timer_CTRL_CAP_MODE_MASK));
 575:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 576:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Write The New Setting */
 577:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL |= captureMode;
 578:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) */
 579:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 580:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* Remove API if Capture Mode is not Software Controlled */
 581:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 582:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 583:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if (DISPLAY_Timer_SoftwareTriggerMode)
 584:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 585:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 586:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 587:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SetTriggerMode
 588:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 589:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 590:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 591:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function sets the trigger input mode
 592:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 593:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 594:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
 595:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #define DISPLAY_Timer__B_TIMER__TM_NONE 0x00u
 596:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #define DISPLAY_Timer__B_TIMER__TM_RISINGEDGE 0x04u
 597:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #define DISPLAY_Timer__B_TIMER__TM_FALLINGEDGE 0x08u
 598:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #define DISPLAY_Timer__B_TIMER__TM_EITHEREDGE 0x0Cu
 599:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #define DISPLAY_Timer__B_TIMER__TM_SOFTWARE 0x10u
 600:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 601:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 602:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 22


 603:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 604:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 605:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SetTriggerMode(uint8 triggerMode) 
 606:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 607:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* This must only set to two bits of the control register associated */
 608:Generated_Source\PSoC4/DISPLAY_Timer.c ****     triggerMode &= DISPLAY_Timer_CTRL_TRIG_MODE_MASK;
 609:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 610:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is remo
 611:Generated_Source\PSoC4/DISPLAY_Timer.c ****     
 612:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear the Current Setting */
 613:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= ((uint8)(~DISPLAY_Timer_CTRL_TRIG_MODE_MASK));
 614:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 615:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Write The New Setting */
 616:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL |= (triggerMode | DISPLAY_Timer__B_TIMER__TM_SOFTWARE);
 617:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Remove code section if control register is not used */
 618:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 619:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* Remove API if Trigger Mode is not Software Controlled */
 620:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 621:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if (DISPLAY_Timer_EnableTriggerMode)
 622:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 623:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 624:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 625:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_EnableTrigger
 626:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 627:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 628:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 629:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Sets the control bit enabling Hardware Trigger mode
 630:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 631:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 632:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 633:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 634:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 635:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 636:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 637:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_EnableTrigger(void) 
 639:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 640:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is remo
 641:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL |= DISPLAY_Timer_CTRL_TRIG_EN;
 642:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Remove code section if control register is not used */
 643:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 644:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 645:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 646:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 647:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_DisableTrigger
 648:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 649:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 650:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 651:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Clears the control bit enabling Hardware Trigger mode
 652:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 653:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 654:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 655:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 656:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 657:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 658:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 659:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 23


 660:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_DisableTrigger(void) 
 661:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 662:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED )   /* Remove assignment if control register is rem
 663:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= ((uint8)(~DISPLAY_Timer_CTRL_TRIG_EN));
 664:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* Remove code section if control register is not used */
 665:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 666:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* Remove API is Trigger Mode is set to None */
 667:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 668:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if(DISPLAY_Timer_InterruptOnCaptureCount)
 669:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 670:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 671:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 672:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SetInterruptCount
 673:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 674:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 675:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 676:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function sets the capture count before an interrupt is triggered.
 677:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 678:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 679:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
 680:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                   an interrupt will occur each time a capture occurs.
 681:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                   A value of 1 to 3 will cause the interrupt
 682:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                   to delay by the same number of captures.
 683:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 684:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 685:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 686:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 687:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 688:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SetInterruptCount(uint8 interruptCount) 
 689:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 690:Generated_Source\PSoC4/DISPLAY_Timer.c ****     /* This must only set to two bits of the control register associated */
 691:Generated_Source\PSoC4/DISPLAY_Timer.c ****     interruptCount &= DISPLAY_Timer_CTRL_INTCNT_MASK;
 692:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 693:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #if (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED)
 694:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Clear the Current Setting */
 695:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL &= ((uint8)(~DISPLAY_Timer_CTRL_INTCNT_MASK));
 696:Generated_Source\PSoC4/DISPLAY_Timer.c ****         /* Write The New Setting */
 697:Generated_Source\PSoC4/DISPLAY_Timer.c ****         DISPLAY_Timer_CONTROL |= interruptCount;
 698:Generated_Source\PSoC4/DISPLAY_Timer.c ****     #endif /* (!DISPLAY_Timer_UDB_CONTROL_REG_REMOVED) */
 699:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 700:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* DISPLAY_Timer_InterruptOnCaptureCount */
 701:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 702:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 703:Generated_Source\PSoC4/DISPLAY_Timer.c **** #if (DISPLAY_Timer_UsingHWCaptureCounter)
 704:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 705:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 706:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 707:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_SetCaptureCount
 708:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 709:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 710:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 711:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function sets the capture count
 712:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 713:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 714:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
 715:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                to 127 will cause the interrupt to delay by the same number of
 716:Generated_Source\PSoC4/DISPLAY_Timer.c **** *                captures.
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 24


 717:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 718:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 719:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 720:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 721:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 722:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_SetCaptureCount(uint8 captureCount) 
 723:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 724:Generated_Source\PSoC4/DISPLAY_Timer.c ****     DISPLAY_Timer_CAP_COUNT = captureCount;
 725:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 726:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 727:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 728:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 729:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ReadCaptureCount
 730:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 731:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 732:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 733:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function reads the capture count setting
 734:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 735:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 736:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 737:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 738:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 739:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  Returns the Capture Count Setting
 740:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 741:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 742:Generated_Source\PSoC4/DISPLAY_Timer.c **** uint8 DISPLAY_Timer_ReadCaptureCount(void) 
 743:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 744:Generated_Source\PSoC4/DISPLAY_Timer.c ****     return ((uint8)DISPLAY_Timer_CAP_COUNT);
 745:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 746:Generated_Source\PSoC4/DISPLAY_Timer.c **** #endif /* DISPLAY_Timer_UsingHWCaptureCounter */
 747:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 748:Generated_Source\PSoC4/DISPLAY_Timer.c **** 
 749:Generated_Source\PSoC4/DISPLAY_Timer.c **** /*******************************************************************************
 750:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Function Name: DISPLAY_Timer_ClearFIFO
 751:Generated_Source\PSoC4/DISPLAY_Timer.c **** ********************************************************************************
 752:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 753:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Summary:
 754:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  This function clears all capture data from the capture FIFO
 755:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 756:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Parameters:
 757:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 758:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 759:Generated_Source\PSoC4/DISPLAY_Timer.c **** * Return:
 760:Generated_Source\PSoC4/DISPLAY_Timer.c **** *  void
 761:Generated_Source\PSoC4/DISPLAY_Timer.c **** *
 762:Generated_Source\PSoC4/DISPLAY_Timer.c **** *******************************************************************************/
 763:Generated_Source\PSoC4/DISPLAY_Timer.c **** void DISPLAY_Timer_ClearFIFO(void) 
 764:Generated_Source\PSoC4/DISPLAY_Timer.c **** {
 596              		.loc 1 764 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600 0000 80B5     		push	{r7, lr}
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
 604 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 25


 605              		.cfi_def_cfa_register 7
 765:Generated_Source\PSoC4/DISPLAY_Timer.c ****     while(0u != (DISPLAY_Timer_ReadStatusRegister() & DISPLAY_Timer_STATUS_FIFONEMP))
 606              		.loc 1 765 0
 607 0004 01E0     		b	.L50
 608              	.L51:
 766:Generated_Source\PSoC4/DISPLAY_Timer.c ****     {
 767:Generated_Source\PSoC4/DISPLAY_Timer.c ****         (void)DISPLAY_Timer_ReadCapture();
 609              		.loc 1 767 0
 610 0006 FFF7FEFF 		bl	DISPLAY_Timer_ReadCapture
 611              	.L50:
 765:Generated_Source\PSoC4/DISPLAY_Timer.c ****     while(0u != (DISPLAY_Timer_ReadStatusRegister() & DISPLAY_Timer_STATUS_FIFONEMP))
 612              		.loc 1 765 0
 613 000a FFF7FEFF 		bl	DISPLAY_Timer_ReadStatusRegister
 614 000e 0300     		movs	r3, r0
 615 0010 1A00     		movs	r2, r3
 616 0012 0823     		movs	r3, #8
 617 0014 1340     		ands	r3, r2
 618 0016 F6D1     		bne	.L51
 768:Generated_Source\PSoC4/DISPLAY_Timer.c ****     }
 769:Generated_Source\PSoC4/DISPLAY_Timer.c **** }
 619              		.loc 1 769 0
 620 0018 C046     		nop
 621 001a BD46     		mov	sp, r7
 622              		@ sp needed
 623 001c 80BD     		pop	{r7, pc}
 624              		.cfi_endproc
 625              	.LFE14:
 626              		.size	DISPLAY_Timer_ClearFIFO, .-DISPLAY_Timer_ClearFIFO
 627 001e C046     		.text
 628              	.Letext0:
 629              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 630              		.section	.debug_info,"",%progbits
 631              	.Ldebug_info0:
 632 0000 57020000 		.4byte	0x257
 633 0004 0400     		.2byte	0x4
 634 0006 00000000 		.4byte	.Ldebug_abbrev0
 635 000a 04       		.byte	0x4
 636 000b 01       		.uleb128 0x1
 637 000c 63010000 		.4byte	.LASF37
 638 0010 0C       		.byte	0xc
 639 0011 9E000000 		.4byte	.LASF38
 640 0015 12020000 		.4byte	.LASF39
 641 0019 00000000 		.4byte	.Ldebug_ranges0+0
 642 001d 00000000 		.4byte	0
 643 0021 00000000 		.4byte	.Ldebug_line0
 644 0025 02       		.uleb128 0x2
 645 0026 01       		.byte	0x1
 646 0027 06       		.byte	0x6
 647 0028 57030000 		.4byte	.LASF0
 648 002c 02       		.uleb128 0x2
 649 002d 01       		.byte	0x1
 650 002e 08       		.byte	0x8
 651 002f FB000000 		.4byte	.LASF1
 652 0033 02       		.uleb128 0x2
 653 0034 02       		.byte	0x2
 654 0035 05       		.byte	0x5
 655 0036 0A030000 		.4byte	.LASF2
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 26


 656 003a 02       		.uleb128 0x2
 657 003b 02       		.byte	0x2
 658 003c 07       		.byte	0x7
 659 003d 79030000 		.4byte	.LASF3
 660 0041 02       		.uleb128 0x2
 661 0042 04       		.byte	0x4
 662 0043 05       		.byte	0x5
 663 0044 1A030000 		.4byte	.LASF4
 664 0048 02       		.uleb128 0x2
 665 0049 04       		.byte	0x4
 666 004a 07       		.byte	0x7
 667 004b 0E010000 		.4byte	.LASF5
 668 004f 02       		.uleb128 0x2
 669 0050 08       		.byte	0x8
 670 0051 05       		.byte	0x5
 671 0052 BA020000 		.4byte	.LASF6
 672 0056 02       		.uleb128 0x2
 673 0057 08       		.byte	0x8
 674 0058 07       		.byte	0x7
 675 0059 80020000 		.4byte	.LASF7
 676 005d 03       		.uleb128 0x3
 677 005e 04       		.byte	0x4
 678 005f 05       		.byte	0x5
 679 0060 696E7400 		.ascii	"int\000"
 680 0064 02       		.uleb128 0x2
 681 0065 04       		.byte	0x4
 682 0066 07       		.byte	0x7
 683 0067 5A020000 		.4byte	.LASF8
 684 006b 04       		.uleb128 0x4
 685 006c 34010000 		.4byte	.LASF9
 686 0070 02       		.byte	0x2
 687 0071 F701     		.2byte	0x1f7
 688 0073 2C000000 		.4byte	0x2c
 689 0077 04       		.uleb128 0x4
 690 0078 F8010000 		.4byte	.LASF10
 691 007c 02       		.byte	0x2
 692 007d F801     		.2byte	0x1f8
 693 007f 3A000000 		.4byte	0x3a
 694 0083 02       		.uleb128 0x2
 695 0084 04       		.byte	0x4
 696 0085 04       		.byte	0x4
 697 0086 3C000000 		.4byte	.LASF11
 698 008a 02       		.uleb128 0x2
 699 008b 08       		.byte	0x8
 700 008c 04       		.byte	0x4
 701 008d F1010000 		.4byte	.LASF12
 702 0091 02       		.uleb128 0x2
 703 0092 01       		.byte	0x1
 704 0093 08       		.byte	0x8
 705 0094 23030000 		.4byte	.LASF13
 706 0098 04       		.uleb128 0x4
 707 0099 09010000 		.4byte	.LASF14
 708 009d 02       		.byte	0x2
 709 009e A102     		.2byte	0x2a1
 710 00a0 A4000000 		.4byte	0xa4
 711 00a4 05       		.uleb128 0x5
 712 00a5 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 27


 713 00a9 04       		.uleb128 0x4
 714 00aa 14030000 		.4byte	.LASF15
 715 00ae 02       		.byte	0x2
 716 00af A202     		.2byte	0x2a2
 717 00b1 B5000000 		.4byte	0xb5
 718 00b5 05       		.uleb128 0x5
 719 00b6 77000000 		.4byte	0x77
 720 00ba 02       		.uleb128 0x2
 721 00bb 08       		.byte	0x8
 722 00bc 04       		.byte	0x4
 723 00bd 28030000 		.4byte	.LASF16
 724 00c1 02       		.uleb128 0x2
 725 00c2 04       		.byte	0x4
 726 00c3 07       		.byte	0x7
 727 00c4 97020000 		.4byte	.LASF17
 728 00c8 06       		.uleb128 0x6
 729 00c9 FF010000 		.4byte	.LASF21
 730 00cd 01       		.byte	0x1
 731 00ce 2B       		.byte	0x2b
 732 00cf 00000000 		.4byte	.LFB0
 733 00d3 54000000 		.4byte	.LFE0-.LFB0
 734 00d7 01       		.uleb128 0x1
 735 00d8 9C       		.byte	0x9c
 736 00d9 EC000000 		.4byte	0xec
 737 00dd 07       		.uleb128 0x7
 738 00de 42000000 		.4byte	.LASF40
 739 00e2 01       		.byte	0x1
 740 00e3 2F       		.byte	0x2f
 741 00e4 6B000000 		.4byte	0x6b
 742 00e8 02       		.uleb128 0x2
 743 00e9 91       		.byte	0x91
 744 00ea 6F       		.sleb128 -17
 745 00eb 00       		.byte	0
 746 00ec 08       		.uleb128 0x8
 747 00ed F5020000 		.4byte	.LASF18
 748 00f1 01       		.byte	0x1
 749 00f2 B4       		.byte	0xb4
 750 00f3 00000000 		.4byte	.LFB1
 751 00f7 20000000 		.4byte	.LFE1-.LFB1
 752 00fb 01       		.uleb128 0x1
 753 00fc 9C       		.byte	0x9c
 754 00fd 09       		.uleb128 0x9
 755 00fe 20010000 		.4byte	.LASF19
 756 0102 01       		.byte	0x1
 757 0103 D7       		.byte	0xd7
 758 0104 00000000 		.4byte	.LFB2
 759 0108 24000000 		.4byte	.LFE2-.LFB2
 760 010c 01       		.uleb128 0x1
 761 010d 9C       		.byte	0x9c
 762 010e 08       		.uleb128 0x8
 763 010f C5000000 		.4byte	.LASF20
 764 0113 01       		.byte	0x1
 765 0114 F7       		.byte	0xf7
 766 0115 00000000 		.4byte	.LFB3
 767 0119 20000000 		.4byte	.LFE3-.LFB3
 768 011d 01       		.uleb128 0x1
 769 011e 9C       		.byte	0x9c
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 28


 770 011f 0A       		.uleb128 0xa
 771 0120 D6020000 		.4byte	.LASF22
 772 0124 01       		.byte	0x1
 773 0125 1701     		.2byte	0x117
 774 0127 00000000 		.4byte	.LFB4
 775 012b 20000000 		.4byte	.LFE4-.LFB4
 776 012f 01       		.uleb128 0x1
 777 0130 9C       		.byte	0x9c
 778 0131 45010000 		.4byte	0x145
 779 0135 0B       		.uleb128 0xb
 780 0136 C8020000 		.4byte	.LASF27
 781 013a 01       		.byte	0x1
 782 013b 1701     		.2byte	0x117
 783 013d 6B000000 		.4byte	0x6b
 784 0141 02       		.uleb128 0x2
 785 0142 91       		.byte	0x91
 786 0143 77       		.sleb128 -9
 787 0144 00       		.byte	0
 788 0145 0C       		.uleb128 0xc
 789 0146 66000000 		.4byte	.LASF23
 790 014a 01       		.byte	0x1
 791 014b 2E01     		.2byte	0x12e
 792 014d 00000000 		.4byte	.LFB5
 793 0151 14000000 		.4byte	.LFE5-.LFB5
 794 0155 01       		.uleb128 0x1
 795 0156 9C       		.byte	0x9c
 796 0157 0D       		.uleb128 0xd
 797 0158 42010000 		.4byte	.LASF24
 798 015c 01       		.byte	0x1
 799 015d 4D01     		.2byte	0x14d
 800 015f 6B000000 		.4byte	0x6b
 801 0163 00000000 		.4byte	.LFB6
 802 0167 14000000 		.4byte	.LFE6-.LFB6
 803 016b 01       		.uleb128 0x1
 804 016c 9C       		.byte	0x9c
 805 016d 0D       		.uleb128 0xd
 806 016e 1A000000 		.4byte	.LASF25
 807 0172 01       		.byte	0x1
 808 0173 6401     		.2byte	0x164
 809 0175 6B000000 		.4byte	0x6b
 810 0179 00000000 		.4byte	.LFB7
 811 017d 14000000 		.4byte	.LFE7-.LFB7
 812 0181 01       		.uleb128 0x1
 813 0182 9C       		.byte	0x9c
 814 0183 0A       		.uleb128 0xa
 815 0184 34030000 		.4byte	.LASF26
 816 0188 01       		.byte	0x1
 817 0189 7B01     		.2byte	0x17b
 818 018b 00000000 		.4byte	.LFB8
 819 018f 20000000 		.4byte	.LFE8-.LFB8
 820 0193 01       		.uleb128 0x1
 821 0194 9C       		.byte	0x9c
 822 0195 A9010000 		.4byte	0x1a9
 823 0199 0B       		.uleb128 0xb
 824 019a 3A010000 		.4byte	.LASF28
 825 019e 01       		.byte	0x1
 826 019f 7B01     		.2byte	0x17b
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 29


 827 01a1 6B000000 		.4byte	0x6b
 828 01a5 02       		.uleb128 0x2
 829 01a6 91       		.byte	0x91
 830 01a7 77       		.sleb128 -9
 831 01a8 00       		.byte	0
 832 01a9 0D       		.uleb128 0xd
 833 01aa 67020000 		.4byte	.LASF29
 834 01ae 01       		.byte	0x1
 835 01af 9501     		.2byte	0x195
 836 01b1 77000000 		.4byte	0x77
 837 01b5 00000000 		.4byte	.LFB9
 838 01b9 14000000 		.4byte	.LFE9-.LFB9
 839 01bd 01       		.uleb128 0x1
 840 01be 9C       		.byte	0x9c
 841 01bf 0A       		.uleb128 0xa
 842 01c0 84000000 		.4byte	.LASF30
 843 01c4 01       		.byte	0x1
 844 01c5 AF01     		.2byte	0x1af
 845 01c7 00000000 		.4byte	.LFB10
 846 01cb 20000000 		.4byte	.LFE10-.LFB10
 847 01cf 01       		.uleb128 0x1
 848 01d0 9C       		.byte	0x9c
 849 01d1 E5010000 		.4byte	0x1e5
 850 01d5 0B       		.uleb128 0xb
 851 01d6 5F000000 		.4byte	.LASF31
 852 01da 01       		.byte	0x1
 853 01db AF01     		.2byte	0x1af
 854 01dd 77000000 		.4byte	0x77
 855 01e1 02       		.uleb128 0x2
 856 01e2 91       		.byte	0x91
 857 01e3 76       		.sleb128 -10
 858 01e4 00       		.byte	0
 859 01e5 0D       		.uleb128 0xd
 860 01e6 A0020000 		.4byte	.LASF32
 861 01ea 01       		.byte	0x1
 862 01eb C801     		.2byte	0x1c8
 863 01ed 77000000 		.4byte	0x77
 864 01f1 00000000 		.4byte	.LFB11
 865 01f5 14000000 		.4byte	.LFE11-.LFB11
 866 01f9 01       		.uleb128 0x1
 867 01fa 9C       		.byte	0x9c
 868 01fb 0A       		.uleb128 0xa
 869 01fc D8000000 		.4byte	.LASF33
 870 0200 01       		.byte	0x1
 871 0201 E001     		.2byte	0x1e0
 872 0203 00000000 		.4byte	.LFB12
 873 0207 20000000 		.4byte	.LFE12-.LFB12
 874 020b 01       		.uleb128 0x1
 875 020c 9C       		.byte	0x9c
 876 020d 21020000 		.4byte	0x221
 877 0211 0B       		.uleb128 0xb
 878 0212 F3000000 		.4byte	.LASF34
 879 0216 01       		.byte	0x1
 880 0217 E001     		.2byte	0x1e0
 881 0219 77000000 		.4byte	0x77
 882 021d 02       		.uleb128 0x2
 883 021e 91       		.byte	0x91
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 30


 884 021f 76       		.sleb128 -10
 885 0220 00       		.byte	0
 886 0221 0D       		.uleb128 0xd
 887 0222 00000000 		.4byte	.LASF35
 888 0226 01       		.byte	0x1
 889 0227 FC01     		.2byte	0x1fc
 890 0229 77000000 		.4byte	0x77
 891 022d 00000000 		.4byte	.LFB13
 892 0231 1C000000 		.4byte	.LFE13-.LFB13
 893 0235 01       		.uleb128 0x1
 894 0236 9C       		.byte	0x9c
 895 0237 0E       		.uleb128 0xe
 896 0238 42020000 		.4byte	.LASF36
 897 023c 01       		.byte	0x1
 898 023d FB02     		.2byte	0x2fb
 899 023f 00000000 		.4byte	.LFB14
 900 0243 1E000000 		.4byte	.LFE14-.LFB14
 901 0247 01       		.uleb128 0x1
 902 0248 9C       		.byte	0x9c
 903 0249 0F       		.uleb128 0xf
 904 024a 63030000 		.4byte	.LASF41
 905 024e 01       		.byte	0x1
 906 024f 1A       		.byte	0x1a
 907 0250 6B000000 		.4byte	0x6b
 908 0254 05       		.uleb128 0x5
 909 0255 03       		.byte	0x3
 910 0256 00000000 		.4byte	DISPLAY_Timer_initVar
 911 025a 00       		.byte	0
 912              		.section	.debug_abbrev,"",%progbits
 913              	.Ldebug_abbrev0:
 914 0000 01       		.uleb128 0x1
 915 0001 11       		.uleb128 0x11
 916 0002 01       		.byte	0x1
 917 0003 25       		.uleb128 0x25
 918 0004 0E       		.uleb128 0xe
 919 0005 13       		.uleb128 0x13
 920 0006 0B       		.uleb128 0xb
 921 0007 03       		.uleb128 0x3
 922 0008 0E       		.uleb128 0xe
 923 0009 1B       		.uleb128 0x1b
 924 000a 0E       		.uleb128 0xe
 925 000b 55       		.uleb128 0x55
 926 000c 17       		.uleb128 0x17
 927 000d 11       		.uleb128 0x11
 928 000e 01       		.uleb128 0x1
 929 000f 10       		.uleb128 0x10
 930 0010 17       		.uleb128 0x17
 931 0011 00       		.byte	0
 932 0012 00       		.byte	0
 933 0013 02       		.uleb128 0x2
 934 0014 24       		.uleb128 0x24
 935 0015 00       		.byte	0
 936 0016 0B       		.uleb128 0xb
 937 0017 0B       		.uleb128 0xb
 938 0018 3E       		.uleb128 0x3e
 939 0019 0B       		.uleb128 0xb
 940 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 31


 941 001b 0E       		.uleb128 0xe
 942 001c 00       		.byte	0
 943 001d 00       		.byte	0
 944 001e 03       		.uleb128 0x3
 945 001f 24       		.uleb128 0x24
 946 0020 00       		.byte	0
 947 0021 0B       		.uleb128 0xb
 948 0022 0B       		.uleb128 0xb
 949 0023 3E       		.uleb128 0x3e
 950 0024 0B       		.uleb128 0xb
 951 0025 03       		.uleb128 0x3
 952 0026 08       		.uleb128 0x8
 953 0027 00       		.byte	0
 954 0028 00       		.byte	0
 955 0029 04       		.uleb128 0x4
 956 002a 16       		.uleb128 0x16
 957 002b 00       		.byte	0
 958 002c 03       		.uleb128 0x3
 959 002d 0E       		.uleb128 0xe
 960 002e 3A       		.uleb128 0x3a
 961 002f 0B       		.uleb128 0xb
 962 0030 3B       		.uleb128 0x3b
 963 0031 05       		.uleb128 0x5
 964 0032 49       		.uleb128 0x49
 965 0033 13       		.uleb128 0x13
 966 0034 00       		.byte	0
 967 0035 00       		.byte	0
 968 0036 05       		.uleb128 0x5
 969 0037 35       		.uleb128 0x35
 970 0038 00       		.byte	0
 971 0039 49       		.uleb128 0x49
 972 003a 13       		.uleb128 0x13
 973 003b 00       		.byte	0
 974 003c 00       		.byte	0
 975 003d 06       		.uleb128 0x6
 976 003e 2E       		.uleb128 0x2e
 977 003f 01       		.byte	0x1
 978 0040 3F       		.uleb128 0x3f
 979 0041 19       		.uleb128 0x19
 980 0042 03       		.uleb128 0x3
 981 0043 0E       		.uleb128 0xe
 982 0044 3A       		.uleb128 0x3a
 983 0045 0B       		.uleb128 0xb
 984 0046 3B       		.uleb128 0x3b
 985 0047 0B       		.uleb128 0xb
 986 0048 27       		.uleb128 0x27
 987 0049 19       		.uleb128 0x19
 988 004a 11       		.uleb128 0x11
 989 004b 01       		.uleb128 0x1
 990 004c 12       		.uleb128 0x12
 991 004d 06       		.uleb128 0x6
 992 004e 40       		.uleb128 0x40
 993 004f 18       		.uleb128 0x18
 994 0050 9642     		.uleb128 0x2116
 995 0052 19       		.uleb128 0x19
 996 0053 01       		.uleb128 0x1
 997 0054 13       		.uleb128 0x13
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 32


 998 0055 00       		.byte	0
 999 0056 00       		.byte	0
 1000 0057 07       		.uleb128 0x7
 1001 0058 34       		.uleb128 0x34
 1002 0059 00       		.byte	0
 1003 005a 03       		.uleb128 0x3
 1004 005b 0E       		.uleb128 0xe
 1005 005c 3A       		.uleb128 0x3a
 1006 005d 0B       		.uleb128 0xb
 1007 005e 3B       		.uleb128 0x3b
 1008 005f 0B       		.uleb128 0xb
 1009 0060 49       		.uleb128 0x49
 1010 0061 13       		.uleb128 0x13
 1011 0062 02       		.uleb128 0x2
 1012 0063 18       		.uleb128 0x18
 1013 0064 00       		.byte	0
 1014 0065 00       		.byte	0
 1015 0066 08       		.uleb128 0x8
 1016 0067 2E       		.uleb128 0x2e
 1017 0068 00       		.byte	0
 1018 0069 3F       		.uleb128 0x3f
 1019 006a 19       		.uleb128 0x19
 1020 006b 03       		.uleb128 0x3
 1021 006c 0E       		.uleb128 0xe
 1022 006d 3A       		.uleb128 0x3a
 1023 006e 0B       		.uleb128 0xb
 1024 006f 3B       		.uleb128 0x3b
 1025 0070 0B       		.uleb128 0xb
 1026 0071 27       		.uleb128 0x27
 1027 0072 19       		.uleb128 0x19
 1028 0073 11       		.uleb128 0x11
 1029 0074 01       		.uleb128 0x1
 1030 0075 12       		.uleb128 0x12
 1031 0076 06       		.uleb128 0x6
 1032 0077 40       		.uleb128 0x40
 1033 0078 18       		.uleb128 0x18
 1034 0079 9742     		.uleb128 0x2117
 1035 007b 19       		.uleb128 0x19
 1036 007c 00       		.byte	0
 1037 007d 00       		.byte	0
 1038 007e 09       		.uleb128 0x9
 1039 007f 2E       		.uleb128 0x2e
 1040 0080 00       		.byte	0
 1041 0081 3F       		.uleb128 0x3f
 1042 0082 19       		.uleb128 0x19
 1043 0083 03       		.uleb128 0x3
 1044 0084 0E       		.uleb128 0xe
 1045 0085 3A       		.uleb128 0x3a
 1046 0086 0B       		.uleb128 0xb
 1047 0087 3B       		.uleb128 0x3b
 1048 0088 0B       		.uleb128 0xb
 1049 0089 27       		.uleb128 0x27
 1050 008a 19       		.uleb128 0x19
 1051 008b 11       		.uleb128 0x11
 1052 008c 01       		.uleb128 0x1
 1053 008d 12       		.uleb128 0x12
 1054 008e 06       		.uleb128 0x6
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 33


 1055 008f 40       		.uleb128 0x40
 1056 0090 18       		.uleb128 0x18
 1057 0091 9642     		.uleb128 0x2116
 1058 0093 19       		.uleb128 0x19
 1059 0094 00       		.byte	0
 1060 0095 00       		.byte	0
 1061 0096 0A       		.uleb128 0xa
 1062 0097 2E       		.uleb128 0x2e
 1063 0098 01       		.byte	0x1
 1064 0099 3F       		.uleb128 0x3f
 1065 009a 19       		.uleb128 0x19
 1066 009b 03       		.uleb128 0x3
 1067 009c 0E       		.uleb128 0xe
 1068 009d 3A       		.uleb128 0x3a
 1069 009e 0B       		.uleb128 0xb
 1070 009f 3B       		.uleb128 0x3b
 1071 00a0 05       		.uleb128 0x5
 1072 00a1 27       		.uleb128 0x27
 1073 00a2 19       		.uleb128 0x19
 1074 00a3 11       		.uleb128 0x11
 1075 00a4 01       		.uleb128 0x1
 1076 00a5 12       		.uleb128 0x12
 1077 00a6 06       		.uleb128 0x6
 1078 00a7 40       		.uleb128 0x40
 1079 00a8 18       		.uleb128 0x18
 1080 00a9 9742     		.uleb128 0x2117
 1081 00ab 19       		.uleb128 0x19
 1082 00ac 01       		.uleb128 0x1
 1083 00ad 13       		.uleb128 0x13
 1084 00ae 00       		.byte	0
 1085 00af 00       		.byte	0
 1086 00b0 0B       		.uleb128 0xb
 1087 00b1 05       		.uleb128 0x5
 1088 00b2 00       		.byte	0
 1089 00b3 03       		.uleb128 0x3
 1090 00b4 0E       		.uleb128 0xe
 1091 00b5 3A       		.uleb128 0x3a
 1092 00b6 0B       		.uleb128 0xb
 1093 00b7 3B       		.uleb128 0x3b
 1094 00b8 05       		.uleb128 0x5
 1095 00b9 49       		.uleb128 0x49
 1096 00ba 13       		.uleb128 0x13
 1097 00bb 02       		.uleb128 0x2
 1098 00bc 18       		.uleb128 0x18
 1099 00bd 00       		.byte	0
 1100 00be 00       		.byte	0
 1101 00bf 0C       		.uleb128 0xc
 1102 00c0 2E       		.uleb128 0x2e
 1103 00c1 00       		.byte	0
 1104 00c2 3F       		.uleb128 0x3f
 1105 00c3 19       		.uleb128 0x19
 1106 00c4 03       		.uleb128 0x3
 1107 00c5 0E       		.uleb128 0xe
 1108 00c6 3A       		.uleb128 0x3a
 1109 00c7 0B       		.uleb128 0xb
 1110 00c8 3B       		.uleb128 0x3b
 1111 00c9 05       		.uleb128 0x5
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 34


 1112 00ca 27       		.uleb128 0x27
 1113 00cb 19       		.uleb128 0x19
 1114 00cc 11       		.uleb128 0x11
 1115 00cd 01       		.uleb128 0x1
 1116 00ce 12       		.uleb128 0x12
 1117 00cf 06       		.uleb128 0x6
 1118 00d0 40       		.uleb128 0x40
 1119 00d1 18       		.uleb128 0x18
 1120 00d2 9742     		.uleb128 0x2117
 1121 00d4 19       		.uleb128 0x19
 1122 00d5 00       		.byte	0
 1123 00d6 00       		.byte	0
 1124 00d7 0D       		.uleb128 0xd
 1125 00d8 2E       		.uleb128 0x2e
 1126 00d9 00       		.byte	0
 1127 00da 3F       		.uleb128 0x3f
 1128 00db 19       		.uleb128 0x19
 1129 00dc 03       		.uleb128 0x3
 1130 00dd 0E       		.uleb128 0xe
 1131 00de 3A       		.uleb128 0x3a
 1132 00df 0B       		.uleb128 0xb
 1133 00e0 3B       		.uleb128 0x3b
 1134 00e1 05       		.uleb128 0x5
 1135 00e2 27       		.uleb128 0x27
 1136 00e3 19       		.uleb128 0x19
 1137 00e4 49       		.uleb128 0x49
 1138 00e5 13       		.uleb128 0x13
 1139 00e6 11       		.uleb128 0x11
 1140 00e7 01       		.uleb128 0x1
 1141 00e8 12       		.uleb128 0x12
 1142 00e9 06       		.uleb128 0x6
 1143 00ea 40       		.uleb128 0x40
 1144 00eb 18       		.uleb128 0x18
 1145 00ec 9742     		.uleb128 0x2117
 1146 00ee 19       		.uleb128 0x19
 1147 00ef 00       		.byte	0
 1148 00f0 00       		.byte	0
 1149 00f1 0E       		.uleb128 0xe
 1150 00f2 2E       		.uleb128 0x2e
 1151 00f3 00       		.byte	0
 1152 00f4 3F       		.uleb128 0x3f
 1153 00f5 19       		.uleb128 0x19
 1154 00f6 03       		.uleb128 0x3
 1155 00f7 0E       		.uleb128 0xe
 1156 00f8 3A       		.uleb128 0x3a
 1157 00f9 0B       		.uleb128 0xb
 1158 00fa 3B       		.uleb128 0x3b
 1159 00fb 05       		.uleb128 0x5
 1160 00fc 27       		.uleb128 0x27
 1161 00fd 19       		.uleb128 0x19
 1162 00fe 11       		.uleb128 0x11
 1163 00ff 01       		.uleb128 0x1
 1164 0100 12       		.uleb128 0x12
 1165 0101 06       		.uleb128 0x6
 1166 0102 40       		.uleb128 0x40
 1167 0103 18       		.uleb128 0x18
 1168 0104 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 35


 1169 0106 19       		.uleb128 0x19
 1170 0107 00       		.byte	0
 1171 0108 00       		.byte	0
 1172 0109 0F       		.uleb128 0xf
 1173 010a 34       		.uleb128 0x34
 1174 010b 00       		.byte	0
 1175 010c 03       		.uleb128 0x3
 1176 010d 0E       		.uleb128 0xe
 1177 010e 3A       		.uleb128 0x3a
 1178 010f 0B       		.uleb128 0xb
 1179 0110 3B       		.uleb128 0x3b
 1180 0111 0B       		.uleb128 0xb
 1181 0112 49       		.uleb128 0x49
 1182 0113 13       		.uleb128 0x13
 1183 0114 3F       		.uleb128 0x3f
 1184 0115 19       		.uleb128 0x19
 1185 0116 02       		.uleb128 0x2
 1186 0117 18       		.uleb128 0x18
 1187 0118 00       		.byte	0
 1188 0119 00       		.byte	0
 1189 011a 00       		.byte	0
 1190              		.section	.debug_aranges,"",%progbits
 1191 0000 8C000000 		.4byte	0x8c
 1192 0004 0200     		.2byte	0x2
 1193 0006 00000000 		.4byte	.Ldebug_info0
 1194 000a 04       		.byte	0x4
 1195 000b 00       		.byte	0
 1196 000c 0000     		.2byte	0
 1197 000e 0000     		.2byte	0
 1198 0010 00000000 		.4byte	.LFB0
 1199 0014 54000000 		.4byte	.LFE0-.LFB0
 1200 0018 00000000 		.4byte	.LFB1
 1201 001c 20000000 		.4byte	.LFE1-.LFB1
 1202 0020 00000000 		.4byte	.LFB2
 1203 0024 24000000 		.4byte	.LFE2-.LFB2
 1204 0028 00000000 		.4byte	.LFB3
 1205 002c 20000000 		.4byte	.LFE3-.LFB3
 1206 0030 00000000 		.4byte	.LFB4
 1207 0034 20000000 		.4byte	.LFE4-.LFB4
 1208 0038 00000000 		.4byte	.LFB5
 1209 003c 14000000 		.4byte	.LFE5-.LFB5
 1210 0040 00000000 		.4byte	.LFB6
 1211 0044 14000000 		.4byte	.LFE6-.LFB6
 1212 0048 00000000 		.4byte	.LFB7
 1213 004c 14000000 		.4byte	.LFE7-.LFB7
 1214 0050 00000000 		.4byte	.LFB8
 1215 0054 20000000 		.4byte	.LFE8-.LFB8
 1216 0058 00000000 		.4byte	.LFB9
 1217 005c 14000000 		.4byte	.LFE9-.LFB9
 1218 0060 00000000 		.4byte	.LFB10
 1219 0064 20000000 		.4byte	.LFE10-.LFB10
 1220 0068 00000000 		.4byte	.LFB11
 1221 006c 14000000 		.4byte	.LFE11-.LFB11
 1222 0070 00000000 		.4byte	.LFB12
 1223 0074 20000000 		.4byte	.LFE12-.LFB12
 1224 0078 00000000 		.4byte	.LFB13
 1225 007c 1C000000 		.4byte	.LFE13-.LFB13
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 36


 1226 0080 00000000 		.4byte	.LFB14
 1227 0084 1E000000 		.4byte	.LFE14-.LFB14
 1228 0088 00000000 		.4byte	0
 1229 008c 00000000 		.4byte	0
 1230              		.section	.debug_ranges,"",%progbits
 1231              	.Ldebug_ranges0:
 1232 0000 00000000 		.4byte	.LFB0
 1233 0004 54000000 		.4byte	.LFE0
 1234 0008 00000000 		.4byte	.LFB1
 1235 000c 20000000 		.4byte	.LFE1
 1236 0010 00000000 		.4byte	.LFB2
 1237 0014 24000000 		.4byte	.LFE2
 1238 0018 00000000 		.4byte	.LFB3
 1239 001c 20000000 		.4byte	.LFE3
 1240 0020 00000000 		.4byte	.LFB4
 1241 0024 20000000 		.4byte	.LFE4
 1242 0028 00000000 		.4byte	.LFB5
 1243 002c 14000000 		.4byte	.LFE5
 1244 0030 00000000 		.4byte	.LFB6
 1245 0034 14000000 		.4byte	.LFE6
 1246 0038 00000000 		.4byte	.LFB7
 1247 003c 14000000 		.4byte	.LFE7
 1248 0040 00000000 		.4byte	.LFB8
 1249 0044 20000000 		.4byte	.LFE8
 1250 0048 00000000 		.4byte	.LFB9
 1251 004c 14000000 		.4byte	.LFE9
 1252 0050 00000000 		.4byte	.LFB10
 1253 0054 20000000 		.4byte	.LFE10
 1254 0058 00000000 		.4byte	.LFB11
 1255 005c 14000000 		.4byte	.LFE11
 1256 0060 00000000 		.4byte	.LFB12
 1257 0064 20000000 		.4byte	.LFE12
 1258 0068 00000000 		.4byte	.LFB13
 1259 006c 1C000000 		.4byte	.LFE13
 1260 0070 00000000 		.4byte	.LFB14
 1261 0074 1E000000 		.4byte	.LFE14
 1262 0078 00000000 		.4byte	0
 1263 007c 00000000 		.4byte	0
 1264              		.section	.debug_line,"",%progbits
 1265              	.Ldebug_line0:
 1266 0000 72010000 		.section	.debug_str,"MS",%progbits,1
 1266      02004A00 
 1266      00000201 
 1266      FB0E0D00 
 1266      01010101 
 1267              	.LASF35:
 1268 0000 44495350 		.ascii	"DISPLAY_Timer_ReadCounter\000"
 1268      4C41595F 
 1268      54696D65 
 1268      725F5265 
 1268      6164436F 
 1269              	.LASF25:
 1270 001a 44495350 		.ascii	"DISPLAY_Timer_ReadControlRegister\000"
 1270      4C41595F 
 1270      54696D65 
 1270      725F5265 
 1270      6164436F 
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 37


 1271              	.LASF11:
 1272 003c 666C6F61 		.ascii	"float\000"
 1272      7400
 1273              	.LASF40:
 1274 0042 44495350 		.ascii	"DISPLAY_Timer_interruptState\000"
 1274      4C41595F 
 1274      54696D65 
 1274      725F696E 
 1274      74657272 
 1275              	.LASF31:
 1276 005f 70657269 		.ascii	"period\000"
 1276      6F6400
 1277              	.LASF23:
 1278 0066 44495350 		.ascii	"DISPLAY_Timer_SoftwareCapture\000"
 1278      4C41595F 
 1278      54696D65 
 1278      725F536F 
 1278      66747761 
 1279              	.LASF30:
 1280 0084 44495350 		.ascii	"DISPLAY_Timer_WritePeriod\000"
 1280      4C41595F 
 1280      54696D65 
 1280      725F5772 
 1280      69746550 
 1281              	.LASF38:
 1282 009e 47656E65 		.ascii	"Generated_Source\\PSoC4\\DISPLAY_Timer.c\000"
 1282      72617465 
 1282      645F536F 
 1282      75726365 
 1282      5C50536F 
 1283              	.LASF20:
 1284 00c5 44495350 		.ascii	"DISPLAY_Timer_Stop\000"
 1284      4C41595F 
 1284      54696D65 
 1284      725F5374 
 1284      6F7000
 1285              	.LASF33:
 1286 00d8 44495350 		.ascii	"DISPLAY_Timer_WriteCounter\000"
 1286      4C41595F 
 1286      54696D65 
 1286      725F5772 
 1286      69746543 
 1287              	.LASF34:
 1288 00f3 636F756E 		.ascii	"counter\000"
 1288      74657200 
 1289              	.LASF1:
 1290 00fb 756E7369 		.ascii	"unsigned char\000"
 1290      676E6564 
 1290      20636861 
 1290      7200
 1291              	.LASF14:
 1292 0109 72656738 		.ascii	"reg8\000"
 1292      00
 1293              	.LASF5:
 1294 010e 6C6F6E67 		.ascii	"long unsigned int\000"
 1294      20756E73 
 1294      69676E65 
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 38


 1294      6420696E 
 1294      7400
 1295              	.LASF19:
 1296 0120 44495350 		.ascii	"DISPLAY_Timer_Start\000"
 1296      4C41595F 
 1296      54696D65 
 1296      725F5374 
 1296      61727400 
 1297              	.LASF9:
 1298 0134 75696E74 		.ascii	"uint8\000"
 1298      3800
 1299              	.LASF28:
 1300 013a 636F6E74 		.ascii	"control\000"
 1300      726F6C00 
 1301              	.LASF24:
 1302 0142 44495350 		.ascii	"DISPLAY_Timer_ReadStatusRegister\000"
 1302      4C41595F 
 1302      54696D65 
 1302      725F5265 
 1302      61645374 
 1303              	.LASF37:
 1304 0163 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1304      43313120 
 1304      352E342E 
 1304      31203230 
 1304      31363036 
 1305 0196 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1305      20726576 
 1305      6973696F 
 1305      6E203233 
 1305      37373135 
 1306 01c9 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1306      66756E63 
 1306      74696F6E 
 1306      2D736563 
 1306      74696F6E 
 1307              	.LASF12:
 1308 01f1 646F7562 		.ascii	"double\000"
 1308      6C6500
 1309              	.LASF10:
 1310 01f8 75696E74 		.ascii	"uint16\000"
 1310      313600
 1311              	.LASF21:
 1312 01ff 44495350 		.ascii	"DISPLAY_Timer_Init\000"
 1312      4C41595F 
 1312      54696D65 
 1312      725F496E 
 1312      697400
 1313              	.LASF39:
 1314 0212 433A5C55 		.ascii	"C:\\Users\\Ala\\Desktop\\Cypress\\BeoM_display.cyds"
 1314      73657273 
 1314      5C416C61 
 1314      5C446573 
 1314      6B746F70 
 1315 0240 6E00     		.ascii	"n\000"
 1316              	.LASF36:
 1317 0242 44495350 		.ascii	"DISPLAY_Timer_ClearFIFO\000"
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 39


 1317      4C41595F 
 1317      54696D65 
 1317      725F436C 
 1317      65617246 
 1318              	.LASF8:
 1319 025a 756E7369 		.ascii	"unsigned int\000"
 1319      676E6564 
 1319      20696E74 
 1319      00
 1320              	.LASF29:
 1321 0267 44495350 		.ascii	"DISPLAY_Timer_ReadPeriod\000"
 1321      4C41595F 
 1321      54696D65 
 1321      725F5265 
 1321      61645065 
 1322              	.LASF7:
 1323 0280 6C6F6E67 		.ascii	"long long unsigned int\000"
 1323      206C6F6E 
 1323      6720756E 
 1323      7369676E 
 1323      65642069 
 1324              	.LASF17:
 1325 0297 73697A65 		.ascii	"sizetype\000"
 1325      74797065 
 1325      00
 1326              	.LASF32:
 1327 02a0 44495350 		.ascii	"DISPLAY_Timer_ReadCapture\000"
 1327      4C41595F 
 1327      54696D65 
 1327      725F5265 
 1327      61644361 
 1328              	.LASF6:
 1329 02ba 6C6F6E67 		.ascii	"long long int\000"
 1329      206C6F6E 
 1329      6720696E 
 1329      7400
 1330              	.LASF27:
 1331 02c8 696E7465 		.ascii	"interruptMode\000"
 1331      72727570 
 1331      744D6F64 
 1331      6500
 1332              	.LASF22:
 1333 02d6 44495350 		.ascii	"DISPLAY_Timer_SetInterruptMode\000"
 1333      4C41595F 
 1333      54696D65 
 1333      725F5365 
 1333      74496E74 
 1334              	.LASF18:
 1335 02f5 44495350 		.ascii	"DISPLAY_Timer_Enable\000"
 1335      4C41595F 
 1335      54696D65 
 1335      725F456E 
 1335      61626C65 
 1336              	.LASF2:
 1337 030a 73686F72 		.ascii	"short int\000"
 1337      7420696E 
 1337      7400
ARM GAS  C:\Users\Ala\AppData\Local\Temp\ccNohp38.s 			page 40


 1338              	.LASF15:
 1339 0314 72656731 		.ascii	"reg16\000"
 1339      3600
 1340              	.LASF4:
 1341 031a 6C6F6E67 		.ascii	"long int\000"
 1341      20696E74 
 1341      00
 1342              	.LASF13:
 1343 0323 63686172 		.ascii	"char\000"
 1343      00
 1344              	.LASF16:
 1345 0328 6C6F6E67 		.ascii	"long double\000"
 1345      20646F75 
 1345      626C6500 
 1346              	.LASF26:
 1347 0334 44495350 		.ascii	"DISPLAY_Timer_WriteControlRegister\000"
 1347      4C41595F 
 1347      54696D65 
 1347      725F5772 
 1347      69746543 
 1348              	.LASF0:
 1349 0357 7369676E 		.ascii	"signed char\000"
 1349      65642063 
 1349      68617200 
 1350              	.LASF41:
 1351 0363 44495350 		.ascii	"DISPLAY_Timer_initVar\000"
 1351      4C41595F 
 1351      54696D65 
 1351      725F696E 
 1351      69745661 
 1352              	.LASF3:
 1353 0379 73686F72 		.ascii	"short unsigned int\000"
 1353      7420756E 
 1353      7369676E 
 1353      65642069 
 1353      6E7400
 1354              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
